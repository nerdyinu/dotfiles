# Nushell Environment Config File
#
# version = "0.84.0"

def create_left_prompt [] {
    mut home = ""
    try {
        if $nu.os-info.name == "windows" {
            $home = $env.USERPROFILE
        } else {
            $home = $env.HOME
        }
    }

    let dir = ([
        ($env.PWD | str substring 0..($home | str length) | str replace $home "~"),
        ($env.PWD | str substring ($home | str length)..)
    ] | str join)

    let path_color = (if (is-admin) { ansi red_bold } else { ansi green_bold })
    let separator_color = (if (is-admin) { ansi light_red_bold } else { ansi light_green_bold })
    let path_segment = $"($path_color)($dir)"

    $path_segment | str replace --all (char path_sep) $"($separator_color)/($path_color)"
}

def create_right_prompt [] {
    # create a right prompt in magenta with green separators and am/pm underlined
    let time_segment = ([
        (ansi reset)
        (ansi magenta)
        (date now | format date '%Y/%m/%d %r')
    ] | str join | str replace --regex --all "([/:])" $"(ansi green)${1}(ansi magenta)" |
        str replace --regex --all "([AP]M)" $"(ansi magenta_underline)${1}")

    let last_exit_code = if ($env.LAST_EXIT_CODE != 0) {([
        (ansi rb)
        ($env.LAST_EXIT_CODE)
    ] | str join)
    } else { "" }

    ([$last_exit_code, (char space), $time_segment] | str join)
}

# Use nushell functions to define your right and left prompt
$env.PROMPT_COMMAND = {|| create_left_prompt }
# $env.PROMPT_COMMAND_RIGHT = {|| create_right_prompt }

# The prompt indicators are environmental variables that represent
# the state of the prompt
$env.PROMPT_INDICATOR = {|| "> " }
$env.PROMPT_INDICATOR_VI_INSERT = {|| ": " }
$env.PROMPT_INDICATOR_VI_NORMAL = {|| "> " }
$env.PROMPT_MULTILINE_INDICATOR = {|| "::: " }

# Specifies how environment variables are:
# - converted from a string to a value on Nushell startup (from_string)
# - converted from a value back to a string when running external commands (to_string)
# Note: The conversions happen *after* config.nu is loaded
$env.ENV_CONVERSIONS = {
    "PATH": {
        from_string: { |s| $s | split row (char esep) | path expand --no-symlink }
        to_string: { |v| $v | path expand --no-symlink | str join (char esep) }
    }
    "Path": {
        from_string: { |s| $s | split row (char esep) | path expand --no-symlink }
        to_string: { |v| $v | path expand --no-symlink | str join (char esep) }
    }
}

# Directories to search for scripts when calling source or use
$env.NU_LIB_DIRS = [
    # ($nu.default-config-dir | path join 'scripts') # add <nushell-config-dir>/scripts
]

# Directories to search for plugin binaries when calling register
$env.NU_PLUGIN_DIRS = [
    # ($nu.default-config-dir | path join 'plugins') # add <nushell-config-dir>/plugins
]

# To add entries to PATH (on Windows you might use Path), you can use the following pattern:

$env.BUN_INSTALL = $env.HOME + "/.bun"

def --env y [...args] {
	let tmp = (mktemp -t "yazi-cwd.XXXXXX")
	yazi ...$args --cwd-file $tmp
	let cwd = (open $tmp)
	if $cwd != "" and $cwd != $env.PWD {
		cd $cwd
	}
	rm -fp $tmp
}

$env.PATH = ($env.PATH | split row (char esep) |
prepend $"($env.BUN_INSTALL)/bin" |
prepend {{ .chezmoi.homeDir }}/go/bin |
prepend {{ .chezmoi.homeDir }}/.cargo/bin |
prepend {{ .chezmoi.homeDir }}/.sdkman/candidates/java/current/bin |
prepend /opt/homebrew/bin |
prepend /opt/homebrew/sbin |
prepend /usr/local/bin |
prepend /System/Cryptexes/App/usr/bin |
prepend /usr/bin |
prepend /bin |
prepend /usr/sbin |
prepend /sbin |
prepend /usr/local/go/bin |
prepend /usr/local/share/dotnet |
prepend {{ .chezmoi.homeDir }}/.dotnet/tools |
prepend /Library/Frameworks/Mono.framework/Versions/Current/Commands |
prepend /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin |
prepend /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin |
prepend /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin |
prepend {{ .chezmoi.homeDir }}/.cargo/bin |
prepend /Applications/kitty.app/Contents/MacOS |
prepend {{ .chezmoi.homeDir }}/Library/`Application Support`/JetBrains/Toolbox/scripts |
prepend /usr/local/go/bin |
prepend {{ .chezmoi.homeDir }}/go/bin |
prepend {{ .chezmoi.homeDir }}/opt/postgresql@15/bin |
prepend {{ .chezmoi.homeDir }}/.rbenv/shims |
prepend /opt/local/bin |
prepend /opt/local/sbin |
prepend /Library/Apple/usr/bin |
prepend {{ .chezmoi.homeDir }}/Library/`Application Support`/JetBrains/Toolbox/scripts |
prepend /opt/homebrew/opt/llvm/bin )

$env.HOME = '{{ .chezmoi.homeDir }}'
$env.HOMEBREW_CELLAR = '/opt/homebrew/Cellar'
$env.HOMEBREW_PREFIX = '/opt/homebrew'
$env.HOMEBREW_REPOSITORY = '/opt/homebrew'
$env.JAVA_HOME = '{{ .chezmoi.homeDir }}/sdkman/candidates/java/current'
$env.ZSH = $env.HOME + "/.oh-my-zsh"
$env.NVM_DIR = $env.HOME + "/.nvm"
$env.XDG_DATA_HOME = $env.HOME + "/.local/share"
$env.TASKDDATA = '{{ .chezmoi.homeDir }}/taskd'


$env.EDITOR = "nvim"
# $env.LC_CTYPE = "ko_KR.UTF-8"
# $env.LANG = "ko_KR.UTF-8"


$env.STARSHIP_SHELL = "nu"
mkdir ~/.cache/starship
starship init nu | save -f ~/.cache/starship/init.nu
zoxide init nushell | save -f ~/.zoxide.nu
